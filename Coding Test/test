- [x] SQL 랭크 함수 활용: ROW_NUMBER, RANK, DENSE_RANK

# SQL 랭크 함수 활용 사례

## 소개
`MEMBER` 임시 테이블을 생성하여 이름, 과목, 점수 데이터를 바탕으로 두 가지 데이터를 추출하고자 함:
1. **과목별 1등이 누구인지**
2. **사람별 점수가 가장 높은 과목이 무엇인지**

이를 위해 SQL의 랭크 함수 `ROW_NUMBER`, `RANK`, `DENSE_RANK`를 비교하며 적합한 방법을 사용.

## 주요 학습 내용

### 1. 데이터 설명
- 테이블명: `MEMBER`
- 컬럼:
  - `이름`: 학생 이름.
  - `과목`: 특정 과목명.
  - `점수`: 과목별 점수.

---

### 2. 랭크 함수 비교

#### ROW_NUMBER
- **정의**:
  - 각 그룹 내에서 고유한 순위를 부여.
- **특징**:
  - 중복 순위를 허용하지 않음.
  - 동일한 점수일 경우, 순위가 중복되지 않고 고유 순위가 부여됨.

#### RANK
- **정의**:
  - 동일한 점수일 경우 동일한 순위를 부여.
- **특징**:
  - 동일한 순위 뒤에 건너뛴 순위가 부여됨.

#### DENSE_RANK
- **정의**:
  - 동일한 점수일 경우 동일한 순위를 부여.
- **특징**:
  - 동일한 순위 뒤에 건너뛴 순위를 부여하지 않음.

| 함수       | 중복 순위 부여 | 순위 건너뛰기 |
| ---------- | -------------- | ------------- |
| ROW_NUMBER | X              | X             |
| RANK       | O              | O             |
| DENSE_RANK | O              | X             |

---

### 3. 적합한 함수: ROW_NUMBER

#### 선택 이유
- **과목별 1등과 사람별 최고 점수 추출 시 고유한 순위 필요**:
  - 중복된 순위가 발생하지 않아 데이터 처리와 해석이 간단.
- **PARTITION BY와 함께 사용**:
  - 특정 그룹 내에서 순위를 지정.

---

### 4. SQL 예제

#### (1) 과목별 1등 추출
```sql
SELECT 과목, 이름, 점수
FROM (
    SELECT 과목, 이름, 점수,
           ROW_NUMBER() OVER (PARTITION BY 과목 ORDER BY 점수 DESC) AS 순위
    FROM MEMBER
) AS Ranked
WHERE 순위 = 1;
```

#### (2) 사람별 최고 점수 과목 추출
```sql
SELECT 이름, 과목, 점수
FROM (
    SELECT 이름, 과목, 점수,
           ROW_NUMBER() OVER (PARTITION BY 이름 ORDER BY 점수 DESC) AS 순위
    FROM MEMBER
) AS Ranked
WHERE 순위 = 1;
```

---

## 깨달은 것

1. **ROW_NUMBER의 적합성**:
   - 중복된 순위를 허용하지 않아 고유 순위를 지정하는 데 적합함.
2. **PARTITION BY의 활용**:
   - 데이터를 그룹화하여 각 그룹 내에서 순위를 부여할 수 있음.
3. **RANK와 DENSE_RANK의 차이**:
   - 데이터 분석 목적에 따라 적합한 랭크 함수를 선택해야 함.

ROW_NUMBER는 고유 순위가 필요한 데이터 처리에 강력하며, 특히 과목별 1등이나 최고 점수를 추출하는 경우에 적합함.

